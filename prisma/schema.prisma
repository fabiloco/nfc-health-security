generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  password   String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime? @db.Timestamp(0)
  role       role      @default(STUDENT)
  nfc        nfc[]
  person     person?
}

model person {
  id             Int                    @id @default(autoincrement())
  dni            String                 @unique
  name           String
  lastname       String?
  phone          String?
  ocupation      String?
  sex            person_sex?
  marital_status person_marital_status?
  address        String?
  blood_type     String?
  height         String?
  religion       String?
  education      String?
  sisben         String?
  estrato        String?
  birthday       DateTime?              @db.Timestamp(0)
  created_at     DateTime               @default(now())
  updated_at     DateTime               @updatedAt
  deleted_at     DateTime?              @db.Timestamp(0)
  user_id        Int                    @unique
  classes        Class[]
  grades         grade[]
  user           user                   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model course {
  id         Int     @id @default(autoincrement())
  courseName String
  instructor String
  classes    Class[]
}

model Class {
  id       Int      @id @default(autoincrement())
  date     DateTime
  location String
  duration Int
  courseId Int
  personId Int
  course   course   @relation(fields: [courseId], references: [id])
  person   person   @relation(fields: [personId], references: [id])
  grades   grade[]

  @@index([courseId], map: "Class_courseId_fkey")
  @@index([personId], map: "Class_personId_fkey")
}

model grade {
  id             Int    @id @default(autoincrement())
  grade          Int
  assignmentName String
  personId       Int
  classId        Int
  class          Class  @relation(fields: [classId], references: [id])
  person         person @relation(fields: [personId], references: [id])

  @@index([classId], map: "grade_classId_fkey")
  @@index([personId], map: "grade_personId_fkey")
}

model nfc {
  id      Int    @id @default(autoincrement())
  token   String @db.LongText
  user_id Int
  user    user   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([user_id], map: "nfc_user_id_fkey")
}

enum role {
  ADMIN
  STUDENT
  TEACHER
}

enum person_sex {
  M
  F
}

enum person_marital_status {
  S
  C
  D
  V
}
