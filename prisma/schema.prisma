generator client {
  provider = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  password   String
  person     person?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime? @db.Timestamp(0)
  role       role      @default(PATIENT)
  nfc        nfc[]
}

enum role {
  ADMIN
  PATIENT
  DOCTOR
}

model person {
  id             Int                    @id @default(autoincrement())
  dni            String                 @unique
  name           String
  lastname       String?
  phone          String?
  ocupation      String?
  sex            person_sex?
  marital_status person_marital_status?
  address        String?
  blood_type     String?
  height         String?
  religion       String?
  education      String?
  sisben         String?
  estrato        String?
  birthday       DateTime?              @db.Timestamp(0)
  deleted_at     DateTime?              @db.Timestamp(0)
  allergies      allergie[]
  appointments   appointment[]
  contacts       contact[]
  conditions     condition[]
  medications    medication[]

  user    user @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_id Int  @unique

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  doctor     doctor?
}

model contact {
  id         Int       @id @default(autoincrement())
  person     person    @relation(fields: [person_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  person_id  Int
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime? @db.Timestamp(0)
}

model nfc {
  id      Int    @id @default(autoincrement())
  token   String @db.LongText
  user    user   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_id Int
}

model allergie {
  id          Int      @id @default(autoincrement())
  name        String
  severity    Int @default(0)
  description String   @db.LongText
  persons     person[]
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model condition {
  id             Int      @id @default(autoincrement())
  name           String
  description    String   @db.LongText
  diagnosis_date DateTime
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  persons        person[]
}

model medication {
  id          Int      @id @default(autoincrement())
  persons     person[]
  name        String
  description String   @db.LongText
  reason      String   @db.LongText
  dosage      String
  frecuency   String
  start_date  DateTime
  end_date    DateTime
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model appointment {
  id          Int       @id @default(autoincrement())
  start_day   DateTime? @db.Timestamp(0)
  reason      String    @db.Text
  description String    @db.LongText
  hospital    String
  address     String
  severity    String
  city        String
  person      person    @relation(fields: [person_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  person_id   Int
  doctors     doctor[]
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
}

model doctor {
  id                   Int           @id @default(autoincrement())
  professional_license String
  recidency_hospital   String
  specialty            String
  appointments         appointment[]
  urgencies            urgency[]

  person    person @relation(fields: [person_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  person_id Int    @unique

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model urgency {
  id          Int       @id @default(autoincrement())
  start_day   DateTime? @db.Timestamp(0)
  end_day     DateTime? @db.Timestamp(0)
  reason      String    @db.Text
  description String    @db.LongText
  hospital    String
  address     String
  severity    String
  city        String
  person_id   Int
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  doctor      doctor?   @relation(fields: [doctorId], references: [id])
  doctorId    Int?
}

enum person_sex {
  M
  F
}

enum person_marital_status {
  S
  C
  D
  V
}
